[1mdiff --git a/checkmarx-ast-eclipse-plugin/src/com/checkmarx/eclipse/views/CheckmarxView.java b/checkmarx-ast-eclipse-plugin/src/com/checkmarx/eclipse/views/CheckmarxView.java[m
[1mindex 37ab24d..4ab0ab8 100644[m
[1m--- a/checkmarx-ast-eclipse-plugin/src/com/checkmarx/eclipse/views/CheckmarxView.java[m
[1m+++ b/checkmarx-ast-eclipse-plugin/src/com/checkmarx/eclipse/views/CheckmarxView.java[m
[36m@@ -2532,21 +2532,26 @@[m [mpublic class CheckmarxView extends ViewPart implements EventHandler {[m
 	 * Disable comboboxes[m
 	 */[m
 	private void disablePluginFields(boolean disableToolBar) {[m
[31m-		Job job = new Job("") {[m
[31m-[m
[32m+[m		[32mJob job = new Job("Checkmarx: Refreshing branch and scans") {[m
 			@Override[m
 			protected IStatus run(IProgressMonitor arg0) {[m
[31m-				PluginUtils.enableComboViewer(projectComboViewer, false);[m
[31m-				PluginUtils.enableComboViewer(branchComboViewer, false);[m
[31m-				PluginUtils.setTextForComboViewer(branchComboViewer, PluginConstants.COMBOBOX_BRANCH_CHANGING);[m
[31m-				loadingScans();[m
[31m-				PluginUtils.showMessage(rootModel, resultsTree, PluginConstants.EMPTY_STRING);[m
[31m-				resultViewComposite.setVisible(false);[m
[31m-				attackVectorCompositePanel.setVisible(false);[m
[31m-[m
[31m-				if (disableToolBar) {[m
[31m-					toolBarActions.getToolBarActions().forEach(action -> action.setEnabled(false));[m
[31m-				}[m
[32m+[m				[32mDisplay.getDefault().syncExec(new Runnable() {[m
[32m+[m					[32m@Override[m
[32m+[m					[32mpublic void run() {[m
[32m+[m						[32mPluginUtils.enableComboViewer(projectComboViewer, false);[m
[32m+[m						[32mPluginUtils.enableComboViewer(branchComboViewer, false);[m
[32m+[m						[32mPluginUtils.setTextForComboViewer(branchComboViewer, PluginConstants.COMBOBOX_BRANCH_CHANGING);[m
[32m+[m						[32mloadingScans();[m
[32m+[m						[32mPluginUtils.showMessage(rootModel, resultsTree, PluginConstants.EMPTY_STRING);[m
[32m+[m						[32mresultViewComposite.setVisible(false);[m
[32m+[m						[32mattackVectorCompositePanel.setVisible(false);[m
[32m+[m
[32m+[m						[32mif (disableToolBar) {[m
[32m+[m							[32mtoolBarActions.getToolBarActions().forEach(action -> action.setEnabled(false));[m
[32m+[m						[32m}[m
[32m+[m					[32m}[m
[32m+[m				[32m});[m
[32m+[m[41m				[m
 				return Status.OK_STATUS;[m
 			}[m
 [m
[1mdiff --git a/checkmarx-ast-eclipse-plugin/src/com/checkmarx/eclipse/views/actions/ActionCancelScan.java b/checkmarx-ast-eclipse-plugin/src/com/checkmarx/eclipse/views/actions/ActionCancelScan.java[m
[1mindex 9f440e5..42bc5ea 100644[m
[1m--- a/checkmarx-ast-eclipse-plugin/src/com/checkmarx/eclipse/views/actions/ActionCancelScan.java[m
[1m+++ b/checkmarx-ast-eclipse-plugin/src/com/checkmarx/eclipse/views/actions/ActionCancelScan.java[m
[36m@@ -1,23 +1,12 @@[m
 package com.checkmarx.eclipse.views.actions;[m
 [m
[31m-import org.eclipse.core.runtime.IProgressMonitor;[m
[31m-import org.eclipse.core.runtime.IStatus;[m
[31m-import org.eclipse.core.runtime.Status;[m
[31m-import org.eclipse.core.runtime.jobs.Job;[m
 import org.eclipse.jface.action.Action;[m
 import org.eclipse.jface.viewers.TreeViewer;[m
[31m-import org.eclipse.jgit.util.StringUtils;[m
[31m-import org.eclipse.mylyn.commons.ui.dialogs.AbstractNotificationPopup;[m
[31m-import org.eclipse.swt.widgets.Display;[m
 [m
 import com.checkmarx.eclipse.Activator;[m
 import com.checkmarx.eclipse.enums.ActionName;[m
[31m-import com.checkmarx.eclipse.utils.CxLogger;[m
[31m-import com.checkmarx.eclipse.utils.NotificationPopUpUI;[m
 import com.checkmarx.eclipse.utils.PluginConstants;[m
[31m-import com.checkmarx.eclipse.views.DataProvider;[m
 import com.checkmarx.eclipse.views.DisplayModel;[m
[31m-import com.checkmarx.eclipse.views.GlobalSettings;[m
 [m
 public class ActionCancelScan extends CxBaseAction {[m
 	[m
[36m@@ -34,32 +23,7 @@[m [mpublic class ActionCancelScan extends CxBaseAction {[m
 		Action cancelScanAction = new Action() {[m
 			@Override[m
 			public void run() {[m
[31m-				Job job = new Job(PluginConstants.CX_CANCELING_SCAN) {[m
[31m-					@Override[m
[31m-					protected IStatus run(IProgressMonitor arg0) {[m
[31m-						try {[m
[31m-							DataProvider.getInstance().cancelScan(GlobalSettings.getFromPreferences(GlobalSettings.PARAM_RUNNING_SCAN_ID, PluginConstants.EMPTY_STRING));[m
[31m-							[m
[31m-							do {[m
[31m-			                } while (!StringUtils.isEmptyOrNull(GlobalSettings.getFromPreferences(GlobalSettings.PARAM_RUNNING_SCAN_ID, PluginConstants.EMPTY_STRING)));[m
[31m-							[m
[31m-							Display.getDefault().syncExec(new Runnable() {[m
[31m-								@Override[m
[31m-								public void run() {[m
[31m-									AbstractNotificationPopup notification = new NotificationPopUpUI(Display.getCurrent(), PluginConstants.CX_SCAN_CANCELED_TITLE, PluginConstants.CX_SCAN_CANCELED_DESCRIPTION, null, null, null);[m
[31m-									notification.setDelayClose(5000);[m
[31m-									notification.open();[m
[31m-								}[m
[31m-							});[m
[31m-							[m
[31m-						} catch (Exception e) {[m
[31m-							CxLogger.error(String.format(PluginConstants.CX_ERROR_CANCELING_SCAN, e.getMessage()), e);[m
[31m-						}[m
[31m-						[m
[31m-						return Status.OK_STATUS;[m
[31m-					}[m
[31m-				};[m
[31m-				job.schedule();[m
[32m+[m				[32mActionStartScan.onCancel();[m
 				[m
 				this.setEnabled(false);[m
 			}[m
[1mdiff --git a/checkmarx-ast-eclipse-plugin/src/com/checkmarx/eclipse/views/actions/ActionStartScan.java b/checkmarx-ast-eclipse-plugin/src/com/checkmarx/eclipse/views/actions/ActionStartScan.java[m
[1mindex ef90e8b..7942820 100644[m
[1m--- a/checkmarx-ast-eclipse-plugin/src/com/checkmarx/eclipse/views/actions/ActionStartScan.java[m
[1m+++ b/checkmarx-ast-eclipse-plugin/src/com/checkmarx/eclipse/views/actions/ActionStartScan.java[m
[36m@@ -209,7 +209,7 @@[m [mpublic class ActionStartScan extends CxBaseAction {[m
 	 */[m
 	private boolean cxProjectMatchesWorkspaceProject() {[m
 		Results results = DataProvider.getInstance().getCurrentResults();[m
[31m-		boolean noResultsInScan = results.getResults().isEmpty();[m
[32m+[m		[32mboolean noResultsInScan = results == null || results.getResults().isEmpty();[m
 		boolean noFilesInWorkspace = ResourcesPlugin.getWorkspace().getRoot().getProjects().length == 0;[m
 		[m
 		if(noResultsInScan || noFilesInWorkspace) {[m
[36m@@ -240,10 +240,11 @@[m [mpublic class ActionStartScan extends CxBaseAction {[m
 		return false;[m
 	}[m
 	[m
[32m+[m	[32mprivate static Job pollJob;[m
 	private void pollScan(String scanId) {[m
 		GlobalSettings.storeInPreferences(GlobalSettings.PARAM_RUNNING_SCAN_ID, scanId);[m
 		[m
[31m-		Job job = new Job(String.format(PluginConstants.CX_RUNNING_SCAN, scanId)) {[m
[32m+[m		[32mpollJob = new Job(String.format(PluginConstants.CX_RUNNING_SCAN, scanId)) {[m
 			@Override[m
 			protected IStatus run(IProgressMonitor arg0) {[m
 				try {			[m
[36m@@ -256,37 +257,49 @@[m [mpublic class ActionStartScan extends CxBaseAction {[m
 				} catch (Exception e) {[m
 					CxLogger.error(String.format(PluginConstants.CX_ERROR_GETTING_SCAN_INFO, e.getMessage()), e);[m
 				}[m
[31m-				[m
 				return Status.OK_STATUS;[m
 			}[m
 			[m
 			@Override[m
 			protected void canceling() {[m
[32m+[m				[32msetName("Canceling scan...");[m
 				super.canceling();[m
 				pollScanExecutor.shutdown();[m
 				cancelScan(scanId);[m
 			}[m
 		};[m
[31m-		job.schedule();[m
[32m+[m		[32mpollJob.schedule();[m
[32m+[m	[32m}[m
[32m+[m[41m	[m
[32m+[m	[32mpublic static void onCancel() {[m
[32m+[m		[32mpollJob.cancel();[m
 	}[m
 	[m
 	private void cancelScan(String scanId) {[m
[31m-		try {[m
[31m-			DataProvider.getInstance().cancelScan(scanId);[m
[31m-			GlobalSettings.storeInPreferences(GlobalSettings.PARAM_RUNNING_SCAN_ID, PluginConstants.EMPTY_STRING);[m
[31m-			Display.getDefault().syncExec(new Runnable() {[m
[31m-				@Override[m
[31m-				public void run() {[m
[31m-					AbstractNotificationPopup notification = new NotificationPopUpUI(Display.getCurrent(), PluginConstants.CX_SCAN_CANCELED_TITLE, PluginConstants.CX_SCAN_CANCELED_DESCRIPTION, null, null, null);[m
[31m-					notification.setDelayClose(5000);[m
[31m-					notification.open();[m
[32m+[m		[32mJob job = new Job(PluginConstants.CX_CANCELING_SCAN) {[m
[32m+[m			[32m@Override[m
[32m+[m			[32mprotected IStatus run(IProgressMonitor arg0) {[m
[32m+[m				[32mtry {[m
[32m+[m					[32mDataProvider.getInstance().cancelScan(scanId);[m
[32m+[m					[32mGlobalSettings.storeInPreferences(GlobalSettings.PARAM_RUNNING_SCAN_ID, PluginConstants.EMPTY_STRING);[m
[32m+[m					[32mDisplay.getDefault().syncExec(new Runnable() {[m
[32m+[m						[32m@Override[m
[32m+[m						[32mpublic void run() {[m
[32m+[m							[32mAbstractNotificationPopup notification = new NotificationPopUpUI(Display.getCurrent(), PluginConstants.CX_SCAN_CANCELED_TITLE, PluginConstants.CX_SCAN_CANCELED_DESCRIPTION, null, null, null);[m
[32m+[m							[32mnotification.setDelayClose(5000);[m
[32m+[m							[32mnotification.open();[m
[32m+[m						[32m}[m
[32m+[m					[32m});[m
[32m+[m					[32mstartScanAction.setEnabled(true);[m
[32m+[m					[32mcancelScanAction.setEnabled(false);[m
[32m+[m				[32m} catch (Exception e) {[m
[32m+[m					[32mCxLogger.error(String.format(PluginConstants.CX_ERROR_CANCELING_SCAN, e.getMessage()), e);[m
 				}[m
[31m-			});[m
[31m-			startScanAction.setEnabled(true);[m
[31m-			cancelScanAction.setEnabled(false);[m
[31m-		} catch (Exception e) {[m
[31m-			CxLogger.error(String.format(PluginConstants.CX_ERROR_CANCELING_SCAN, e.getMessage()), e);[m
[31m-		}[m
[32m+[m[41m				[m
[32m+[m				[32mreturn Status.OK_STATUS;[m
[32m+[m			[32m}[m
[32m+[m		[32m};[m
[32m+[m		[32mjob.schedule();[m
 	}[m
 	[m
 	private Runnable pollingScan(String scanId) {[m
